/* Generated By:JavaCC: Do not edit this line. FFaplConstants.java */
package ffapl.ast;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface FFaplConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EQUAL_SIGN = 5;
  /** RegularExpression Id. */
  int LOWER = 6;
  /** RegularExpression Id. */
  int GREATER = 7;
  /** RegularExpression Id. */
  int LOWER_EQUAL = 8;
  /** RegularExpression Id. */
  int GREATER_EQUAL = 9;
  /** RegularExpression Id. */
  int EQUAL = 10;
  /** RegularExpression Id. */
  int NOT_EQUAL = 11;
  /** RegularExpression Id. */
  int NOT = 12;
  /** RegularExpression Id. */
  int PLUS = 13;
  /** RegularExpression Id. */
  int MINUS = 14;
  /** RegularExpression Id. */
  int MULTIPLY = 15;
  /** RegularExpression Id. */
  int DIVIDE = 16;
  /** RegularExpression Id. */
  int PERCENT = 17;
  /** RegularExpression Id. */
  int MODULO = 18;
  /** RegularExpression Id. */
  int HASH_KEY = 19;
  /** RegularExpression Id. */
  int SQUARED_BRACE_LEFT = 20;
  /** RegularExpression Id. */
  int SQUARED_BRACE_RIGHT = 21;
  /** RegularExpression Id. */
  int CURLY_BRACE_LEFT = 22;
  /** RegularExpression Id. */
  int CURLY_BRACE_RIGHT = 23;
  /** RegularExpression Id. */
  int BRACE_LEFT = 24;
  /** RegularExpression Id. */
  int BRACE_RIGHT = 25;
  /** RegularExpression Id. */
  int DOT = 26;
  /** RegularExpression Id. */
  int ASSIGN = 27;
  /** RegularExpression Id. */
  int SEMICOLON = 28;
  /** RegularExpression Id. */
  int COMMA = 29;
  /** RegularExpression Id. */
  int COLON = 30;
  /** RegularExpression Id. */
  int POWER = 31;
  /** RegularExpression Id. */
  int AND = 32;
  /** RegularExpression Id. */
  int OR = 33;
  /** RegularExpression Id. */
  int Z = 34;
  /** RegularExpression Id. */
  int INTEGER = 35;
  /** RegularExpression Id. */
  int BOOLEAN = 36;
  /** RegularExpression Id. */
  int PRIME = 37;
  /** RegularExpression Id. */
  int POLYNOMIAL = 38;
  /** RegularExpression Id. */
  int TSTRING = 39;
  /** RegularExpression Id. */
  int WHILE = 40;
  /** RegularExpression Id. */
  int NEW = 41;
  /** RegularExpression Id. */
  int IF = 42;
  /** RegularExpression Id. */
  int FOR = 43;
  /** RegularExpression Id. */
  int TRUE = 44;
  /** RegularExpression Id. */
  int FALSE = 45;
  /** RegularExpression Id. */
  int ELSE = 46;
  /** RegularExpression Id. */
  int RANDOM = 47;
  /** RegularExpression Id. */
  int RANDOMGENERATOR = 48;
  /** RegularExpression Id. */
  int TO = 49;
  /** RegularExpression Id. */
  int STEP = 50;
  /** RegularExpression Id. */
  int GF = 51;
  /** RegularExpression Id. */
  int RECORD = 52;
  /** RegularExpression Id. */
  int ENDRECORD = 53;
  /** RegularExpression Id. */
  int PSEUDORANDOMGENERATOR = 54;
  /** RegularExpression Id. */
  int PSEUDORANDOM = 55;
  /** RegularExpression Id. */
  int PROGRAM = 56;
  /** RegularExpression Id. */
  int PROCEDURE = 57;
  /** RegularExpression Id. */
  int FUNCTION = 58;
  /** RegularExpression Id. */
  int RETURN = 59;
  /** RegularExpression Id. */
  int CONST = 60;
  /** RegularExpression Id. */
  int BREAK = 61;
  /** RegularExpression Id. */
  int LETTER = 62;
  /** RegularExpression Id. */
  int DIGIT = 63;
  /** RegularExpression Id. */
  int IDENT = 64;
  /** RegularExpression Id. */
  int NUMBER = 65;
  /** RegularExpression Id. */
  int STRING = 66;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 70;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 71;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 72;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"!\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"MOD\"",
    "\"#\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\".\"",
    "\":=\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\"^\"",
    "\"AND\"",
    "\"OR\"",
    "\"Z\"",
    "\"Integer\"",
    "\"Boolean\"",
    "\"Prime\"",
    "\"Polynomial\"",
    "\"String\"",
    "\"while\"",
    "\"new\"",
    "\"if\"",
    "\"for\"",
    "\"true\"",
    "\"false\"",
    "\"else\"",
    "\"Random\"",
    "\"RandomGenerator\"",
    "\"to\"",
    "\"step\"",
    "\"GF\"",
    "\"Record\"",
    "\"EndRecord\"",
    "\"PseudoRandomGenerator\"",
    "\"PseudoRandom\"",
    "\"program\"",
    "\"procedure\"",
    "\"function\"",
    "\"return\"",
    "\"const\"",
    "\"break\"",
    "<LETTER>",
    "<DIGIT>",
    "<IDENT>",
    "<NUMBER>",
    "<STRING>",
    "\"//\"",
    "<token of kind 68>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 73>",
  };

}
